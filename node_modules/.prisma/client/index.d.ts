
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model admin
 * 
 */
export type admin = {
  id: number
  full_name: string
  phone: string
  otp: number
}

/**
 * Model media
 * 
 */
export type media = {
  id: number
  reference_id: number
  type: string
  media_type: string | null
  path: string
  created_at: Date
  updated_at: Date
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  full_name: string
  email: string
  phone: string
  gender: string
  otp: number
  dob: string
  health_id: string
  passkey: string
  time_zone: string
  remember_token: boolean
  verified: boolean
  skipped_preferences: boolean
  has_preferences: boolean
  created_at: Date
  updated_at: Date
  image: string
}

/**
 * Model user_relatives
 * 
 */
export type user_relatives = {
  id: number
  full_name: string
  phone: string
  gender: string
  dob: string
  relation: string
  created_at: Date
  updated_at: Date
  userId: number
  health_id: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.admin`: Exposes CRUD operations for the **admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.adminDelegate<GlobalReject>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.mediaDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.user_relatives`: Exposes CRUD operations for the **user_relatives** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_relatives
    * const user_relatives = await prisma.user_relatives.findMany()
    * ```
    */
  get user_relatives(): Prisma.user_relativesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: 46cd7ed225f7eb084fb5035de2e89efce45aab93
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    admin: 'admin',
    media: 'media',
    user: 'user',
    user_relatives: 'user_relatives'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    user_relatives: number
  }

  export type UserCountOutputTypeSelect = {
    user_relatives?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    otp: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    otp: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    full_name: string | null
    phone: string | null
    otp: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    full_name: string | null
    phone: string | null
    otp: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    full_name: number
    phone: number
    otp: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    otp?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    otp?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    otp?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    otp?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    otp?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which admin to aggregate.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: adminWhereInput
    orderBy?: Enumerable<adminOrderByWithAggregationInput>
    by: Array<AdminScalarFieldEnum>
    having?: adminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    id: number
    full_name: string
    phone: string
    otp: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type adminSelect = {
    id?: boolean
    full_name?: boolean
    phone?: boolean
    otp?: boolean
  }

  export type adminGetPayload<
    S extends boolean | null | undefined | adminArgs,
    U = keyof S
      > = S extends true
        ? admin
    : S extends undefined
    ? never
    : S extends adminArgs | adminFindManyArgs
    ?'include' extends U
    ? admin 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof admin ? admin[P] : never
  } 
    : admin
  : admin


  type adminCountArgs = Merge<
    Omit<adminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }
  >

  export interface adminDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Admin that matches the filter.
     * @param {adminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends adminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, adminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'admin'> extends True ? CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>> : CheckSelect<T, Prisma__adminClient<admin | null >, Prisma__adminClient<adminGetPayload<T> | null >>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends adminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, adminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'admin'> extends True ? CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>> : CheckSelect<T, Prisma__adminClient<admin | null >, Prisma__adminClient<adminGetPayload<T> | null >>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends adminFindManyArgs>(
      args?: SelectSubset<T, adminFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<admin>>, PrismaPromise<Array<adminGetPayload<T>>>>

    /**
     * Create a Admin.
     * @param {adminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends adminCreateArgs>(
      args: SelectSubset<T, adminCreateArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Create many Admins.
     *     @param {adminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends adminCreateManyArgs>(
      args?: SelectSubset<T, adminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {adminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends adminDeleteArgs>(
      args: SelectSubset<T, adminDeleteArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Update one Admin.
     * @param {adminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends adminUpdateArgs>(
      args: SelectSubset<T, adminUpdateArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Delete zero or more Admins.
     * @param {adminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends adminDeleteManyArgs>(
      args?: SelectSubset<T, adminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends adminUpdateManyArgs>(
      args: SelectSubset<T, adminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {adminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends adminUpsertArgs>(
      args: SelectSubset<T, adminUpsertArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminCountArgs>(
      args?: Subset<T, adminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__adminClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * admin findUnique
   */
  export type adminFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Throw an Error if a admin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which admin to fetch.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin findFirst
   */
  export type adminFindFirstArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Throw an Error if a admin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which admin to fetch.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * admin findMany
   */
  export type adminFindManyArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Filter, which admins to fetch.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * admin create
   */
  export type adminCreateArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The data needed to create a admin.
     * 
    **/
    data: XOR<adminCreateInput, adminUncheckedCreateInput>
  }


  /**
   * admin createMany
   */
  export type adminCreateManyArgs = {
    /**
     * The data used to create many admins.
     * 
    **/
    data: Enumerable<adminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * admin update
   */
  export type adminUpdateArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The data needed to update a admin.
     * 
    **/
    data: XOR<adminUpdateInput, adminUncheckedUpdateInput>
    /**
     * Choose, which admin to update.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin updateMany
   */
  export type adminUpdateManyArgs = {
    /**
     * The data used to update admins.
     * 
    **/
    data: XOR<adminUpdateManyMutationInput, adminUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     * 
    **/
    where?: adminWhereInput
  }


  /**
   * admin upsert
   */
  export type adminUpsertArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The filter to search for the admin to update in case it exists.
     * 
    **/
    where: adminWhereUniqueInput
    /**
     * In case the admin found by the `where` argument doesn't exist, create a new admin with this data.
     * 
    **/
    create: XOR<adminCreateInput, adminUncheckedCreateInput>
    /**
     * In case the admin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<adminUpdateInput, adminUncheckedUpdateInput>
  }


  /**
   * admin delete
   */
  export type adminDeleteArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Filter which admin to delete.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin deleteMany
   */
  export type adminDeleteManyArgs = {
    /**
     * Filter which admins to delete
     * 
    **/
    where?: adminWhereInput
  }


  /**
   * admin without action
   */
  export type adminArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
  }



  /**
   * Model media
   */


  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaAvgAggregateOutputType = {
    id: number | null
    reference_id: number | null
  }

  export type MediaSumAggregateOutputType = {
    id: number | null
    reference_id: number | null
  }

  export type MediaMinAggregateOutputType = {
    id: number | null
    reference_id: number | null
    type: string | null
    media_type: string | null
    path: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MediaMaxAggregateOutputType = {
    id: number | null
    reference_id: number | null
    type: string | null
    media_type: string | null
    path: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    reference_id: number
    type: number
    media_type: number
    path: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type MediaAvgAggregateInputType = {
    id?: true
    reference_id?: true
  }

  export type MediaSumAggregateInputType = {
    id?: true
    reference_id?: true
  }

  export type MediaMinAggregateInputType = {
    id?: true
    reference_id?: true
    type?: true
    media_type?: true
    path?: true
    created_at?: true
    updated_at?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    reference_id?: true
    type?: true
    media_type?: true
    path?: true
    created_at?: true
    updated_at?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    reference_id?: true
    type?: true
    media_type?: true
    path?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type MediaAggregateArgs = {
    /**
     * Filter which media to aggregate.
     * 
    **/
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     * 
    **/
    orderBy?: Enumerable<mediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type MediaGroupByArgs = {
    where?: mediaWhereInput
    orderBy?: Enumerable<mediaOrderByWithAggregationInput>
    by: Array<MediaScalarFieldEnum>
    having?: mediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _avg?: MediaAvgAggregateInputType
    _sum?: MediaSumAggregateInputType
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }


  export type MediaGroupByOutputType = {
    id: number
    reference_id: number
    type: string
    media_type: string | null
    path: string
    created_at: Date
    updated_at: Date
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends MediaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type mediaSelect = {
    id?: boolean
    reference_id?: boolean
    type?: boolean
    media_type?: boolean
    path?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type mediaGetPayload<
    S extends boolean | null | undefined | mediaArgs,
    U = keyof S
      > = S extends true
        ? media
    : S extends undefined
    ? never
    : S extends mediaArgs | mediaFindManyArgs
    ?'include' extends U
    ? media 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof media ? media[P] : never
  } 
    : media
  : media


  type mediaCountArgs = Merge<
    Omit<mediaFindManyArgs, 'select' | 'include'> & {
      select?: MediaCountAggregateInputType | true
    }
  >

  export interface mediaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Media that matches the filter.
     * @param {mediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mediaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, mediaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'media'> extends True ? CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>> : CheckSelect<T, Prisma__mediaClient<media | null >, Prisma__mediaClient<mediaGetPayload<T> | null >>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mediaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, mediaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'media'> extends True ? CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>> : CheckSelect<T, Prisma__mediaClient<media | null >, Prisma__mediaClient<mediaGetPayload<T> | null >>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mediaFindManyArgs>(
      args?: SelectSubset<T, mediaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<media>>, PrismaPromise<Array<mediaGetPayload<T>>>>

    /**
     * Create a Media.
     * @param {mediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
    **/
    create<T extends mediaCreateArgs>(
      args: SelectSubset<T, mediaCreateArgs>
    ): CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>>

    /**
     * Create many Media.
     *     @param {mediaCreateManyArgs} args - Arguments to create many Media.
     *     @example
     *     // Create many Media
     *     const media = await prisma.media.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mediaCreateManyArgs>(
      args?: SelectSubset<T, mediaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Media.
     * @param {mediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
    **/
    delete<T extends mediaDeleteArgs>(
      args: SelectSubset<T, mediaDeleteArgs>
    ): CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>>

    /**
     * Update one Media.
     * @param {mediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mediaUpdateArgs>(
      args: SelectSubset<T, mediaUpdateArgs>
    ): CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>>

    /**
     * Delete zero or more Media.
     * @param {mediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mediaDeleteManyArgs>(
      args?: SelectSubset<T, mediaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mediaUpdateManyArgs>(
      args: SelectSubset<T, mediaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Media.
     * @param {mediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
    **/
    upsert<T extends mediaUpsertArgs>(
      args: SelectSubset<T, mediaUpsertArgs>
    ): CheckSelect<T, Prisma__mediaClient<media>, Prisma__mediaClient<mediaGetPayload<T>>>

    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends mediaCountArgs>(
      args?: Subset<T, mediaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaGroupByArgs['orderBy'] }
        : { orderBy?: MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__mediaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * media findUnique
   */
  export type mediaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * Throw an Error if a media can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which media to fetch.
     * 
    **/
    where: mediaWhereUniqueInput
  }


  /**
   * media findFirst
   */
  export type mediaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * Throw an Error if a media can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which media to fetch.
     * 
    **/
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     * 
    **/
    orderBy?: Enumerable<mediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for media.
     * 
    **/
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of media.
     * 
    **/
    distinct?: Enumerable<MediaScalarFieldEnum>
  }


  /**
   * media findMany
   */
  export type mediaFindManyArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * Filter, which media to fetch.
     * 
    **/
    where?: mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of media to fetch.
     * 
    **/
    orderBy?: Enumerable<mediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing media.
     * 
    **/
    cursor?: mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` media from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` media.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MediaScalarFieldEnum>
  }


  /**
   * media create
   */
  export type mediaCreateArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * The data needed to create a media.
     * 
    **/
    data: XOR<mediaCreateInput, mediaUncheckedCreateInput>
  }


  /**
   * media createMany
   */
  export type mediaCreateManyArgs = {
    /**
     * The data used to create many media.
     * 
    **/
    data: Enumerable<mediaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * media update
   */
  export type mediaUpdateArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * The data needed to update a media.
     * 
    **/
    data: XOR<mediaUpdateInput, mediaUncheckedUpdateInput>
    /**
     * Choose, which media to update.
     * 
    **/
    where: mediaWhereUniqueInput
  }


  /**
   * media updateMany
   */
  export type mediaUpdateManyArgs = {
    /**
     * The data used to update media.
     * 
    **/
    data: XOR<mediaUpdateManyMutationInput, mediaUncheckedUpdateManyInput>
    /**
     * Filter which media to update
     * 
    **/
    where?: mediaWhereInput
  }


  /**
   * media upsert
   */
  export type mediaUpsertArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * The filter to search for the media to update in case it exists.
     * 
    **/
    where: mediaWhereUniqueInput
    /**
     * In case the media found by the `where` argument doesn't exist, create a new media with this data.
     * 
    **/
    create: XOR<mediaCreateInput, mediaUncheckedCreateInput>
    /**
     * In case the media was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<mediaUpdateInput, mediaUncheckedUpdateInput>
  }


  /**
   * media delete
   */
  export type mediaDeleteArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
    /**
     * Filter which media to delete.
     * 
    **/
    where: mediaWhereUniqueInput
  }


  /**
   * media deleteMany
   */
  export type mediaDeleteManyArgs = {
    /**
     * Filter which media to delete
     * 
    **/
    where?: mediaWhereInput
  }


  /**
   * media without action
   */
  export type mediaArgs = {
    /**
     * Select specific fields to fetch from the media
     * 
    **/
    select?: mediaSelect | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    otp: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    otp: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    full_name: string | null
    email: string | null
    phone: string | null
    gender: string | null
    otp: number | null
    dob: string | null
    health_id: string | null
    passkey: string | null
    time_zone: string | null
    remember_token: boolean | null
    verified: boolean | null
    skipped_preferences: boolean | null
    has_preferences: boolean | null
    created_at: Date | null
    updated_at: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    full_name: string | null
    email: string | null
    phone: string | null
    gender: string | null
    otp: number | null
    dob: string | null
    health_id: string | null
    passkey: string | null
    time_zone: string | null
    remember_token: boolean | null
    verified: boolean | null
    skipped_preferences: boolean | null
    has_preferences: boolean | null
    created_at: Date | null
    updated_at: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    full_name: number
    email: number
    phone: number
    gender: number
    otp: number
    dob: number
    health_id: number
    passkey: number
    time_zone: number
    remember_token: number
    verified: number
    skipped_preferences: number
    has_preferences: number
    created_at: number
    updated_at: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    otp?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    otp?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    full_name?: true
    email?: true
    phone?: true
    gender?: true
    otp?: true
    dob?: true
    health_id?: true
    passkey?: true
    time_zone?: true
    remember_token?: true
    verified?: true
    skipped_preferences?: true
    has_preferences?: true
    created_at?: true
    updated_at?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    full_name?: true
    email?: true
    phone?: true
    gender?: true
    otp?: true
    dob?: true
    health_id?: true
    passkey?: true
    time_zone?: true
    remember_token?: true
    verified?: true
    skipped_preferences?: true
    has_preferences?: true
    created_at?: true
    updated_at?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    full_name?: true
    email?: true
    phone?: true
    gender?: true
    otp?: true
    dob?: true
    health_id?: true
    passkey?: true
    time_zone?: true
    remember_token?: true
    verified?: true
    skipped_preferences?: true
    has_preferences?: true
    created_at?: true
    updated_at?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    full_name: string
    email: string
    phone: string
    gender: string
    otp: number
    dob: string
    health_id: string
    passkey: string
    time_zone: string
    remember_token: boolean
    verified: boolean
    skipped_preferences: boolean
    has_preferences: boolean
    created_at: Date
    updated_at: Date
    image: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    full_name?: boolean
    email?: boolean
    phone?: boolean
    gender?: boolean
    otp?: boolean
    dob?: boolean
    health_id?: boolean
    passkey?: boolean
    time_zone?: boolean
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean
    user_relatives?: boolean | user_relativesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    user_relatives?: boolean | user_relativesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user_relatives' ? Array < user_relativesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user_relatives' ? Array < user_relativesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_relatives<T extends user_relativesFindManyArgs = {}>(args?: Subset<T, user_relativesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_relatives>>, PrismaPromise<Array<user_relativesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model user_relatives
   */


  export type AggregateUser_relatives = {
    _count: User_relativesCountAggregateOutputType | null
    _avg: User_relativesAvgAggregateOutputType | null
    _sum: User_relativesSumAggregateOutputType | null
    _min: User_relativesMinAggregateOutputType | null
    _max: User_relativesMaxAggregateOutputType | null
  }

  export type User_relativesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type User_relativesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type User_relativesMinAggregateOutputType = {
    id: number | null
    full_name: string | null
    phone: string | null
    gender: string | null
    dob: string | null
    relation: string | null
    created_at: Date | null
    updated_at: Date | null
    userId: number | null
    health_id: string | null
  }

  export type User_relativesMaxAggregateOutputType = {
    id: number | null
    full_name: string | null
    phone: string | null
    gender: string | null
    dob: string | null
    relation: string | null
    created_at: Date | null
    updated_at: Date | null
    userId: number | null
    health_id: string | null
  }

  export type User_relativesCountAggregateOutputType = {
    id: number
    full_name: number
    phone: number
    gender: number
    dob: number
    relation: number
    created_at: number
    updated_at: number
    userId: number
    health_id: number
    _all: number
  }


  export type User_relativesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type User_relativesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type User_relativesMinAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    gender?: true
    dob?: true
    relation?: true
    created_at?: true
    updated_at?: true
    userId?: true
    health_id?: true
  }

  export type User_relativesMaxAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    gender?: true
    dob?: true
    relation?: true
    created_at?: true
    updated_at?: true
    userId?: true
    health_id?: true
  }

  export type User_relativesCountAggregateInputType = {
    id?: true
    full_name?: true
    phone?: true
    gender?: true
    dob?: true
    relation?: true
    created_at?: true
    updated_at?: true
    userId?: true
    health_id?: true
    _all?: true
  }

  export type User_relativesAggregateArgs = {
    /**
     * Filter which user_relatives to aggregate.
     * 
    **/
    where?: user_relativesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_relatives to fetch.
     * 
    **/
    orderBy?: Enumerable<user_relativesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_relativesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_relatives from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_relatives.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_relatives
    **/
    _count?: true | User_relativesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_relativesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_relativesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_relativesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_relativesMaxAggregateInputType
  }

  export type GetUser_relativesAggregateType<T extends User_relativesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_relatives]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_relatives[P]>
      : GetScalarType<T[P], AggregateUser_relatives[P]>
  }




  export type User_relativesGroupByArgs = {
    where?: user_relativesWhereInput
    orderBy?: Enumerable<user_relativesOrderByWithAggregationInput>
    by: Array<User_relativesScalarFieldEnum>
    having?: user_relativesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_relativesCountAggregateInputType | true
    _avg?: User_relativesAvgAggregateInputType
    _sum?: User_relativesSumAggregateInputType
    _min?: User_relativesMinAggregateInputType
    _max?: User_relativesMaxAggregateInputType
  }


  export type User_relativesGroupByOutputType = {
    id: number
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at: Date
    updated_at: Date
    userId: number
    health_id: string
    _count: User_relativesCountAggregateOutputType | null
    _avg: User_relativesAvgAggregateOutputType | null
    _sum: User_relativesSumAggregateOutputType | null
    _min: User_relativesMinAggregateOutputType | null
    _max: User_relativesMaxAggregateOutputType | null
  }

  type GetUser_relativesGroupByPayload<T extends User_relativesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_relativesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_relativesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_relativesGroupByOutputType[P]>
            : GetScalarType<T[P], User_relativesGroupByOutputType[P]>
        }
      >
    >


  export type user_relativesSelect = {
    id?: boolean
    full_name?: boolean
    phone?: boolean
    gender?: boolean
    dob?: boolean
    relation?: boolean
    created_at?: boolean
    updated_at?: boolean
    userId?: boolean
    health_id?: boolean
    user?: boolean | userArgs
  }

  export type user_relativesInclude = {
    user?: boolean | userArgs
  }

  export type user_relativesGetPayload<
    S extends boolean | null | undefined | user_relativesArgs,
    U = keyof S
      > = S extends true
        ? user_relatives
    : S extends undefined
    ? never
    : S extends user_relativesArgs | user_relativesFindManyArgs
    ?'include' extends U
    ? user_relatives  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<S['select'][P]> :  P extends keyof user_relatives ? user_relatives[P] : never
  } 
    : user_relatives
  : user_relatives


  type user_relativesCountArgs = Merge<
    Omit<user_relativesFindManyArgs, 'select' | 'include'> & {
      select?: User_relativesCountAggregateInputType | true
    }
  >

  export interface user_relativesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_relatives that matches the filter.
     * @param {user_relativesFindUniqueArgs} args - Arguments to find a User_relatives
     * @example
     * // Get one User_relatives
     * const user_relatives = await prisma.user_relatives.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_relativesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_relativesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_relatives'> extends True ? CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>> : CheckSelect<T, Prisma__user_relativesClient<user_relatives | null >, Prisma__user_relativesClient<user_relativesGetPayload<T> | null >>

    /**
     * Find the first User_relatives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_relativesFindFirstArgs} args - Arguments to find a User_relatives
     * @example
     * // Get one User_relatives
     * const user_relatives = await prisma.user_relatives.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_relativesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_relativesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_relatives'> extends True ? CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>> : CheckSelect<T, Prisma__user_relativesClient<user_relatives | null >, Prisma__user_relativesClient<user_relativesGetPayload<T> | null >>

    /**
     * Find zero or more User_relatives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_relativesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_relatives
     * const user_relatives = await prisma.user_relatives.findMany()
     * 
     * // Get first 10 User_relatives
     * const user_relatives = await prisma.user_relatives.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_relativesWithIdOnly = await prisma.user_relatives.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_relativesFindManyArgs>(
      args?: SelectSubset<T, user_relativesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_relatives>>, PrismaPromise<Array<user_relativesGetPayload<T>>>>

    /**
     * Create a User_relatives.
     * @param {user_relativesCreateArgs} args - Arguments to create a User_relatives.
     * @example
     * // Create one User_relatives
     * const User_relatives = await prisma.user_relatives.create({
     *   data: {
     *     // ... data to create a User_relatives
     *   }
     * })
     * 
    **/
    create<T extends user_relativesCreateArgs>(
      args: SelectSubset<T, user_relativesCreateArgs>
    ): CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>>

    /**
     * Create many User_relatives.
     *     @param {user_relativesCreateManyArgs} args - Arguments to create many User_relatives.
     *     @example
     *     // Create many User_relatives
     *     const user_relatives = await prisma.user_relatives.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_relativesCreateManyArgs>(
      args?: SelectSubset<T, user_relativesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_relatives.
     * @param {user_relativesDeleteArgs} args - Arguments to delete one User_relatives.
     * @example
     * // Delete one User_relatives
     * const User_relatives = await prisma.user_relatives.delete({
     *   where: {
     *     // ... filter to delete one User_relatives
     *   }
     * })
     * 
    **/
    delete<T extends user_relativesDeleteArgs>(
      args: SelectSubset<T, user_relativesDeleteArgs>
    ): CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>>

    /**
     * Update one User_relatives.
     * @param {user_relativesUpdateArgs} args - Arguments to update one User_relatives.
     * @example
     * // Update one User_relatives
     * const user_relatives = await prisma.user_relatives.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_relativesUpdateArgs>(
      args: SelectSubset<T, user_relativesUpdateArgs>
    ): CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>>

    /**
     * Delete zero or more User_relatives.
     * @param {user_relativesDeleteManyArgs} args - Arguments to filter User_relatives to delete.
     * @example
     * // Delete a few User_relatives
     * const { count } = await prisma.user_relatives.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_relativesDeleteManyArgs>(
      args?: SelectSubset<T, user_relativesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_relativesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_relatives
     * const user_relatives = await prisma.user_relatives.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_relativesUpdateManyArgs>(
      args: SelectSubset<T, user_relativesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_relatives.
     * @param {user_relativesUpsertArgs} args - Arguments to update or create a User_relatives.
     * @example
     * // Update or create a User_relatives
     * const user_relatives = await prisma.user_relatives.upsert({
     *   create: {
     *     // ... data to create a User_relatives
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_relatives we want to update
     *   }
     * })
    **/
    upsert<T extends user_relativesUpsertArgs>(
      args: SelectSubset<T, user_relativesUpsertArgs>
    ): CheckSelect<T, Prisma__user_relativesClient<user_relatives>, Prisma__user_relativesClient<user_relativesGetPayload<T>>>

    /**
     * Count the number of User_relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_relativesCountArgs} args - Arguments to filter User_relatives to count.
     * @example
     * // Count the number of User_relatives
     * const count = await prisma.user_relatives.count({
     *   where: {
     *     // ... the filter for the User_relatives we want to count
     *   }
     * })
    **/
    count<T extends user_relativesCountArgs>(
      args?: Subset<T, user_relativesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_relativesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_relativesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_relativesAggregateArgs>(args: Subset<T, User_relativesAggregateArgs>): PrismaPromise<GetUser_relativesAggregateType<T>>

    /**
     * Group by User_relatives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_relativesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_relativesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_relativesGroupByArgs['orderBy'] }
        : { orderBy?: User_relativesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_relativesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_relativesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_relatives.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_relativesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_relatives findUnique
   */
  export type user_relativesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * Throw an Error if a user_relatives can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_relatives to fetch.
     * 
    **/
    where: user_relativesWhereUniqueInput
  }


  /**
   * user_relatives findFirst
   */
  export type user_relativesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * Throw an Error if a user_relatives can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_relatives to fetch.
     * 
    **/
    where?: user_relativesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_relatives to fetch.
     * 
    **/
    orderBy?: Enumerable<user_relativesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_relatives.
     * 
    **/
    cursor?: user_relativesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_relatives from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_relatives.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_relatives.
     * 
    **/
    distinct?: Enumerable<User_relativesScalarFieldEnum>
  }


  /**
   * user_relatives findMany
   */
  export type user_relativesFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * Filter, which user_relatives to fetch.
     * 
    **/
    where?: user_relativesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_relatives to fetch.
     * 
    **/
    orderBy?: Enumerable<user_relativesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_relatives.
     * 
    **/
    cursor?: user_relativesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_relatives from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_relatives.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_relativesScalarFieldEnum>
  }


  /**
   * user_relatives create
   */
  export type user_relativesCreateArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * The data needed to create a user_relatives.
     * 
    **/
    data: XOR<user_relativesCreateInput, user_relativesUncheckedCreateInput>
  }


  /**
   * user_relatives createMany
   */
  export type user_relativesCreateManyArgs = {
    /**
     * The data used to create many user_relatives.
     * 
    **/
    data: Enumerable<user_relativesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_relatives update
   */
  export type user_relativesUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * The data needed to update a user_relatives.
     * 
    **/
    data: XOR<user_relativesUpdateInput, user_relativesUncheckedUpdateInput>
    /**
     * Choose, which user_relatives to update.
     * 
    **/
    where: user_relativesWhereUniqueInput
  }


  /**
   * user_relatives updateMany
   */
  export type user_relativesUpdateManyArgs = {
    /**
     * The data used to update user_relatives.
     * 
    **/
    data: XOR<user_relativesUpdateManyMutationInput, user_relativesUncheckedUpdateManyInput>
    /**
     * Filter which user_relatives to update
     * 
    **/
    where?: user_relativesWhereInput
  }


  /**
   * user_relatives upsert
   */
  export type user_relativesUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * The filter to search for the user_relatives to update in case it exists.
     * 
    **/
    where: user_relativesWhereUniqueInput
    /**
     * In case the user_relatives found by the `where` argument doesn't exist, create a new user_relatives with this data.
     * 
    **/
    create: XOR<user_relativesCreateInput, user_relativesUncheckedCreateInput>
    /**
     * In case the user_relatives was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_relativesUpdateInput, user_relativesUncheckedUpdateInput>
  }


  /**
   * user_relatives delete
   */
  export type user_relativesDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
    /**
     * Filter which user_relatives to delete.
     * 
    **/
    where: user_relativesWhereUniqueInput
  }


  /**
   * user_relatives deleteMany
   */
  export type user_relativesDeleteManyArgs = {
    /**
     * Filter which user_relatives to delete
     * 
    **/
    where?: user_relativesWhereInput
  }


  /**
   * user_relatives without action
   */
  export type user_relativesArgs = {
    /**
     * Select specific fields to fetch from the user_relatives
     * 
    **/
    select?: user_relativesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_relativesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    phone: 'phone',
    otp: 'otp'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    reference_id: 'reference_id',
    type: 'type',
    media_type: 'media_type',
    path: 'path',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    email: 'email',
    phone: 'phone',
    gender: 'gender',
    otp: 'otp',
    dob: 'dob',
    health_id: 'health_id',
    passkey: 'passkey',
    time_zone: 'time_zone',
    remember_token: 'remember_token',
    verified: 'verified',
    skipped_preferences: 'skipped_preferences',
    has_preferences: 'has_preferences',
    created_at: 'created_at',
    updated_at: 'updated_at',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_relativesScalarFieldEnum: {
    id: 'id',
    full_name: 'full_name',
    phone: 'phone',
    gender: 'gender',
    dob: 'dob',
    relation: 'relation',
    created_at: 'created_at',
    updated_at: 'updated_at',
    userId: 'userId',
    health_id: 'health_id'
  };

  export type User_relativesScalarFieldEnum = (typeof User_relativesScalarFieldEnum)[keyof typeof User_relativesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type adminWhereInput = {
    AND?: Enumerable<adminWhereInput>
    OR?: Enumerable<adminWhereInput>
    NOT?: Enumerable<adminWhereInput>
    id?: IntFilter | number
    full_name?: StringFilter | string
    phone?: StringFilter | string
    otp?: IntFilter | number
  }

  export type adminOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
  }

  export type adminWhereUniqueInput = {
    id?: number
    phone?: string
  }

  export type adminOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    _count?: adminCountOrderByAggregateInput
    _avg?: adminAvgOrderByAggregateInput
    _max?: adminMaxOrderByAggregateInput
    _min?: adminMinOrderByAggregateInput
    _sum?: adminSumOrderByAggregateInput
  }

  export type adminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<adminScalarWhereWithAggregatesInput>
    OR?: Enumerable<adminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<adminScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    full_name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    otp?: IntWithAggregatesFilter | number
  }

  export type mediaWhereInput = {
    AND?: Enumerable<mediaWhereInput>
    OR?: Enumerable<mediaWhereInput>
    NOT?: Enumerable<mediaWhereInput>
    id?: IntFilter | number
    reference_id?: IntFilter | number
    type?: StringFilter | string
    media_type?: StringNullableFilter | string | null
    path?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type mediaOrderByWithRelationInput = {
    id?: SortOrder
    reference_id?: SortOrder
    type?: SortOrder
    media_type?: SortOrder
    path?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type mediaWhereUniqueInput = {
    id?: number
  }

  export type mediaOrderByWithAggregationInput = {
    id?: SortOrder
    reference_id?: SortOrder
    type?: SortOrder
    media_type?: SortOrder
    path?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: mediaCountOrderByAggregateInput
    _avg?: mediaAvgOrderByAggregateInput
    _max?: mediaMaxOrderByAggregateInput
    _min?: mediaMinOrderByAggregateInput
    _sum?: mediaSumOrderByAggregateInput
  }

  export type mediaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<mediaScalarWhereWithAggregatesInput>
    OR?: Enumerable<mediaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<mediaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    reference_id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    media_type?: StringNullableWithAggregatesFilter | string | null
    path?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    full_name?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    gender?: StringFilter | string
    otp?: IntFilter | number
    dob?: StringFilter | string
    health_id?: StringFilter | string
    passkey?: StringFilter | string
    time_zone?: StringFilter | string
    remember_token?: BoolFilter | boolean
    verified?: BoolFilter | boolean
    skipped_preferences?: BoolFilter | boolean
    has_preferences?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    image?: StringFilter | string
    user_relatives?: User_relativesListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    otp?: SortOrder
    dob?: SortOrder
    health_id?: SortOrder
    passkey?: SortOrder
    time_zone?: SortOrder
    remember_token?: SortOrder
    verified?: SortOrder
    skipped_preferences?: SortOrder
    has_preferences?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
    user_relatives?: user_relativesOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    phone?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    otp?: SortOrder
    dob?: SortOrder
    health_id?: SortOrder
    passkey?: SortOrder
    time_zone?: SortOrder
    remember_token?: SortOrder
    verified?: SortOrder
    skipped_preferences?: SortOrder
    has_preferences?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    full_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
    otp?: IntWithAggregatesFilter | number
    dob?: StringWithAggregatesFilter | string
    health_id?: StringWithAggregatesFilter | string
    passkey?: StringWithAggregatesFilter | string
    time_zone?: StringWithAggregatesFilter | string
    remember_token?: BoolWithAggregatesFilter | boolean
    verified?: BoolWithAggregatesFilter | boolean
    skipped_preferences?: BoolWithAggregatesFilter | boolean
    has_preferences?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    image?: StringWithAggregatesFilter | string
  }

  export type user_relativesWhereInput = {
    AND?: Enumerable<user_relativesWhereInput>
    OR?: Enumerable<user_relativesWhereInput>
    NOT?: Enumerable<user_relativesWhereInput>
    id?: IntFilter | number
    full_name?: StringFilter | string
    phone?: StringFilter | string
    gender?: StringFilter | string
    dob?: StringFilter | string
    relation?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    health_id?: StringFilter | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type user_relativesOrderByWithRelationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    relation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    health_id?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type user_relativesWhereUniqueInput = {
    id?: number
    phone?: string
  }

  export type user_relativesOrderByWithAggregationInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    relation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    health_id?: SortOrder
    _count?: user_relativesCountOrderByAggregateInput
    _avg?: user_relativesAvgOrderByAggregateInput
    _max?: user_relativesMaxOrderByAggregateInput
    _min?: user_relativesMinOrderByAggregateInput
    _sum?: user_relativesSumOrderByAggregateInput
  }

  export type user_relativesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_relativesScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_relativesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_relativesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    full_name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
    dob?: StringWithAggregatesFilter | string
    relation?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
    health_id?: StringWithAggregatesFilter | string
  }

  export type adminCreateInput = {
    full_name: string
    phone: string
    otp?: number
  }

  export type adminUncheckedCreateInput = {
    id?: number
    full_name: string
    phone: string
    otp?: number
  }

  export type adminUpdateInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
  }

  export type adminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
  }

  export type adminCreateManyInput = {
    id?: number
    full_name: string
    phone: string
    otp?: number
  }

  export type adminUpdateManyMutationInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
  }

  export type adminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
  }

  export type mediaCreateInput = {
    reference_id?: number
    type?: string
    media_type?: string | null
    path?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type mediaUncheckedCreateInput = {
    id?: number
    reference_id?: number
    type?: string
    media_type?: string | null
    path?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type mediaUpdateInput = {
    reference_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    media_type?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    media_type?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mediaCreateManyInput = {
    id?: number
    reference_id?: number
    type?: string
    media_type?: string | null
    path?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type mediaUpdateManyMutationInput = {
    reference_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    media_type?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    media_type?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    full_name?: string
    email?: string
    phone: string
    gender?: string
    otp?: number
    dob?: string
    health_id?: string
    passkey?: string
    time_zone?: string
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: Date | string
    updated_at: Date | string
    image?: string
    user_relatives?: user_relativesCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    full_name?: string
    email?: string
    phone: string
    gender?: string
    otp?: number
    dob?: string
    health_id?: string
    passkey?: string
    time_zone?: string
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: Date | string
    updated_at: Date | string
    image?: string
    user_relatives?: user_relativesUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    user_relatives?: user_relativesUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    user_relatives?: user_relativesUncheckedUpdateManyWithoutUserInput
  }

  export type userCreateManyInput = {
    id?: number
    full_name?: string
    email?: string
    phone: string
    gender?: string
    otp?: number
    dob?: string
    health_id?: string
    passkey?: string
    time_zone?: string
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: Date | string
    updated_at: Date | string
    image?: string
  }

  export type userUpdateManyMutationInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesCreateInput = {
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    health_id?: string
    user: userCreateNestedOneWithoutUser_relativesInput
  }

  export type user_relativesUncheckedCreateInput = {
    id?: number
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    userId: number
    health_id?: string
  }

  export type user_relativesUpdateInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    health_id?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutUser_relativesInput
  }

  export type user_relativesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    health_id?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesCreateManyInput = {
    id?: number
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    userId: number
    health_id?: string
  }

  export type user_relativesUpdateManyMutationInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    health_id?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    health_id?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type adminCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
  }

  export type adminAvgOrderByAggregateInput = {
    id?: SortOrder
    otp?: SortOrder
  }

  export type adminMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
  }

  export type adminMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
  }

  export type adminSumOrderByAggregateInput = {
    id?: SortOrder
    otp?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type mediaCountOrderByAggregateInput = {
    id?: SortOrder
    reference_id?: SortOrder
    type?: SortOrder
    media_type?: SortOrder
    path?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type mediaAvgOrderByAggregateInput = {
    id?: SortOrder
    reference_id?: SortOrder
  }

  export type mediaMaxOrderByAggregateInput = {
    id?: SortOrder
    reference_id?: SortOrder
    type?: SortOrder
    media_type?: SortOrder
    path?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type mediaMinOrderByAggregateInput = {
    id?: SortOrder
    reference_id?: SortOrder
    type?: SortOrder
    media_type?: SortOrder
    path?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type mediaSumOrderByAggregateInput = {
    id?: SortOrder
    reference_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type User_relativesListRelationFilter = {
    every?: user_relativesWhereInput
    some?: user_relativesWhereInput
    none?: user_relativesWhereInput
  }

  export type user_relativesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    otp?: SortOrder
    dob?: SortOrder
    health_id?: SortOrder
    passkey?: SortOrder
    time_zone?: SortOrder
    remember_token?: SortOrder
    verified?: SortOrder
    skipped_preferences?: SortOrder
    has_preferences?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    otp?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    otp?: SortOrder
    dob?: SortOrder
    health_id?: SortOrder
    passkey?: SortOrder
    time_zone?: SortOrder
    remember_token?: SortOrder
    verified?: SortOrder
    skipped_preferences?: SortOrder
    has_preferences?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    otp?: SortOrder
    dob?: SortOrder
    health_id?: SortOrder
    passkey?: SortOrder
    time_zone?: SortOrder
    remember_token?: SortOrder
    verified?: SortOrder
    skipped_preferences?: SortOrder
    has_preferences?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    otp?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type user_relativesCountOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    relation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    health_id?: SortOrder
  }

  export type user_relativesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type user_relativesMaxOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    relation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    health_id?: SortOrder
  }

  export type user_relativesMinOrderByAggregateInput = {
    id?: SortOrder
    full_name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    relation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    health_id?: SortOrder
  }

  export type user_relativesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type user_relativesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_relativesCreateWithoutUserInput>, Enumerable<user_relativesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_relativesCreateOrConnectWithoutUserInput>
    createMany?: user_relativesCreateManyUserInputEnvelope
    connect?: Enumerable<user_relativesWhereUniqueInput>
  }

  export type user_relativesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_relativesCreateWithoutUserInput>, Enumerable<user_relativesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_relativesCreateOrConnectWithoutUserInput>
    createMany?: user_relativesCreateManyUserInputEnvelope
    connect?: Enumerable<user_relativesWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type user_relativesUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<user_relativesCreateWithoutUserInput>, Enumerable<user_relativesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_relativesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_relativesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_relativesCreateManyUserInputEnvelope
    set?: Enumerable<user_relativesWhereUniqueInput>
    disconnect?: Enumerable<user_relativesWhereUniqueInput>
    delete?: Enumerable<user_relativesWhereUniqueInput>
    connect?: Enumerable<user_relativesWhereUniqueInput>
    update?: Enumerable<user_relativesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_relativesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_relativesScalarWhereInput>
  }

  export type user_relativesUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<user_relativesCreateWithoutUserInput>, Enumerable<user_relativesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_relativesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_relativesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_relativesCreateManyUserInputEnvelope
    set?: Enumerable<user_relativesWhereUniqueInput>
    disconnect?: Enumerable<user_relativesWhereUniqueInput>
    delete?: Enumerable<user_relativesWhereUniqueInput>
    connect?: Enumerable<user_relativesWhereUniqueInput>
    update?: Enumerable<user_relativesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_relativesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_relativesScalarWhereInput>
  }

  export type userCreateNestedOneWithoutUser_relativesInput = {
    create?: XOR<userCreateWithoutUser_relativesInput, userUncheckedCreateWithoutUser_relativesInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_relativesInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutUser_relativesInput = {
    create?: XOR<userCreateWithoutUser_relativesInput, userUncheckedCreateWithoutUser_relativesInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_relativesInput
    upsert?: userUpsertWithoutUser_relativesInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutUser_relativesInput, userUncheckedUpdateWithoutUser_relativesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type user_relativesCreateWithoutUserInput = {
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    health_id?: string
  }

  export type user_relativesUncheckedCreateWithoutUserInput = {
    id?: number
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    health_id?: string
  }

  export type user_relativesCreateOrConnectWithoutUserInput = {
    where: user_relativesWhereUniqueInput
    create: XOR<user_relativesCreateWithoutUserInput, user_relativesUncheckedCreateWithoutUserInput>
  }

  export type user_relativesCreateManyUserInputEnvelope = {
    data: Enumerable<user_relativesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type user_relativesUpsertWithWhereUniqueWithoutUserInput = {
    where: user_relativesWhereUniqueInput
    update: XOR<user_relativesUpdateWithoutUserInput, user_relativesUncheckedUpdateWithoutUserInput>
    create: XOR<user_relativesCreateWithoutUserInput, user_relativesUncheckedCreateWithoutUserInput>
  }

  export type user_relativesUpdateWithWhereUniqueWithoutUserInput = {
    where: user_relativesWhereUniqueInput
    data: XOR<user_relativesUpdateWithoutUserInput, user_relativesUncheckedUpdateWithoutUserInput>
  }

  export type user_relativesUpdateManyWithWhereWithoutUserInput = {
    where: user_relativesScalarWhereInput
    data: XOR<user_relativesUpdateManyMutationInput, user_relativesUncheckedUpdateManyWithoutUser_relativesInput>
  }

  export type user_relativesScalarWhereInput = {
    AND?: Enumerable<user_relativesScalarWhereInput>
    OR?: Enumerable<user_relativesScalarWhereInput>
    NOT?: Enumerable<user_relativesScalarWhereInput>
    id?: IntFilter | number
    full_name?: StringFilter | string
    phone?: StringFilter | string
    gender?: StringFilter | string
    dob?: StringFilter | string
    relation?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    health_id?: StringFilter | string
  }

  export type userCreateWithoutUser_relativesInput = {
    full_name?: string
    email?: string
    phone: string
    gender?: string
    otp?: number
    dob?: string
    health_id?: string
    passkey?: string
    time_zone?: string
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: Date | string
    updated_at: Date | string
    image?: string
  }

  export type userUncheckedCreateWithoutUser_relativesInput = {
    id?: number
    full_name?: string
    email?: string
    phone: string
    gender?: string
    otp?: number
    dob?: string
    health_id?: string
    passkey?: string
    time_zone?: string
    remember_token?: boolean
    verified?: boolean
    skipped_preferences?: boolean
    has_preferences?: boolean
    created_at?: Date | string
    updated_at: Date | string
    image?: string
  }

  export type userCreateOrConnectWithoutUser_relativesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_relativesInput, userUncheckedCreateWithoutUser_relativesInput>
  }

  export type userUpsertWithoutUser_relativesInput = {
    update: XOR<userUpdateWithoutUser_relativesInput, userUncheckedUpdateWithoutUser_relativesInput>
    create: XOR<userCreateWithoutUser_relativesInput, userUncheckedCreateWithoutUser_relativesInput>
  }

  export type userUpdateWithoutUser_relativesInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutUser_relativesInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    otp?: IntFieldUpdateOperationsInput | number
    dob?: StringFieldUpdateOperationsInput | string
    health_id?: StringFieldUpdateOperationsInput | string
    passkey?: StringFieldUpdateOperationsInput | string
    time_zone?: StringFieldUpdateOperationsInput | string
    remember_token?: BoolFieldUpdateOperationsInput | boolean
    verified?: BoolFieldUpdateOperationsInput | boolean
    skipped_preferences?: BoolFieldUpdateOperationsInput | boolean
    has_preferences?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesCreateManyUserInput = {
    id?: number
    full_name: string
    phone: string
    gender: string
    dob: string
    relation: string
    created_at?: Date | string
    updated_at: Date | string
    health_id?: string
  }

  export type user_relativesUpdateWithoutUserInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    health_id?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    health_id?: StringFieldUpdateOperationsInput | string
  }

  export type user_relativesUncheckedUpdateManyWithoutUser_relativesInput = {
    id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    health_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}